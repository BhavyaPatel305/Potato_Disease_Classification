[
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "google.cloud",
        "description": "google.cloud",
        "isExtraImport": true,
        "detail": "google.cloud",
        "documentation": {}
    },
    {
        "label": "read_file_as_image",
        "kind": 2,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "def read_file_as_image(data) -> np.ndarray:\n    # data is basically bytes\n    image = np.array(Image.open(BytesIO(data))) # Open/Read those bytes as PIL Image, and then convert PIL Image into numpy array\n    return image # numpy array of the image\n# Predict Method: It is a post routine as here we are not trying to get a record or something, we are doing model prediction and post is appropriate for it\n@app.post(\"/predict\")\nasync def predict(\n    # Arguments\n    # A file sent by an application or a website, an image of a potato plant leaf\n    # FastAPI provides in-build validation, we use upload file as datatype",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "app = FastAPI()\n# If we upload image, to our website without the code written below, it will give Cross Origin Resource Sharing Error\n# as website is running on port 3000 and backend fast api server is running on port 8000\norigins = [\n    \"*\"\n    #\"https://localhost\",\n    # React.JS UI is running on port 3000\n    #\"https://localhost:3000\",\n]\n# Here we are telling FAST API, add middleware and allow the above origins",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "origins = [\n    \"*\"\n    #\"https://localhost\",\n    # React.JS UI is running on port 3000\n    #\"https://localhost:3000\",\n]\n# Here we are telling FAST API, add middleware and allow the above origins\napp.add_middleware(\n    CORSMiddleware, \n    allow_origins=origins, ",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "MODEL",
        "kind": 5,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "MODEL = tf.keras.models.load_model(\"../saved_models/6/6.h5\")\n# Class Names need to be consistent with: ['Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy']\nCLASS_NAMES = [\"Early Blight\", \"Late Blight\", \"Healthy\"]\n# ping method to make sure server is alive.\n@app.get(\"/ping\")\nasync def ping():\n    return \"Hello, I am alive.\"\n# Function to take bytes as input and return np.ndarray\n# Used to get the image in form of numpy array, which can be used for predictions\ndef read_file_as_image(data) -> np.ndarray:",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "CLASS_NAMES",
        "kind": 5,
        "importPath": "api.main",
        "description": "api.main",
        "peekOfCode": "CLASS_NAMES = [\"Early Blight\", \"Late Blight\", \"Healthy\"]\n# ping method to make sure server is alive.\n@app.get(\"/ping\")\nasync def ping():\n    return \"Hello, I am alive.\"\n# Function to take bytes as input and return np.ndarray\n# Used to get the image in form of numpy array, which can be used for predictions\ndef read_file_as_image(data) -> np.ndarray:\n    # data is basically bytes\n    image = np.array(Image.open(BytesIO(data))) # Open/Read those bytes as PIL Image, and then convert PIL Image into numpy array",
        "detail": "api.main",
        "documentation": {}
    },
    {
        "label": "download_blob",
        "kind": 2,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "def download_blob(bucket_name, source_blob_name, destination_file_name):\n    \"\"\"Downloads a blob from the bucket.\"\"\"\n    # Download the model from the bucket\n    storage_client = storage.Client()\n    # Get the bucket\n    bucket = storage_client.get_bucket(bucket_name)\n    # Get the blob\n    blob = bucket.blob(source_blob_name)\n    # Download the blob to this destination: destination_file_name\n    blob.download_to_filename(destination_file_name)",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "predict",
        "kind": 2,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "def predict(request):\n    # model variable is global\n    global model\n    # This function will be executed multiple times, so execute this method only on the first call\n    if model is None:\n        # Download the model\n        download_blob(\n            # Name of the bucket\n            BUCKET_NAME,\n            # This is in the bucket on cloud",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "model = None\ninterpreter = None\ninput_index = None\noutput_index = None\n# Define the class names for prediction output\nclass_names = ['Bacterial Spot',\n 'Early Blight',\n 'Late Blight',\n 'Leaf Mold',\n 'Septoria Leaf Spot',",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "interpreter",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "interpreter = None\ninput_index = None\noutput_index = None\n# Define the class names for prediction output\nclass_names = ['Bacterial Spot',\n 'Early Blight',\n 'Late Blight',\n 'Leaf Mold',\n 'Septoria Leaf Spot',\n 'Spider Mites Two Spotted Spider Mite',",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "input_index",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "input_index = None\noutput_index = None\n# Define the class names for prediction output\nclass_names = ['Bacterial Spot',\n 'Early Blight',\n 'Late Blight',\n 'Leaf Mold',\n 'Septoria Leaf Spot',\n 'Spider Mites Two Spotted Spider Mite',\n 'Target Spot',",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "output_index",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "output_index = None\n# Define the class names for prediction output\nclass_names = ['Bacterial Spot',\n 'Early Blight',\n 'Late Blight',\n 'Leaf Mold',\n 'Septoria Leaf Spot',\n 'Spider Mites Two Spotted Spider Mite',\n 'Target Spot',\n 'YellowLeaf Curl Virus',",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "class_names",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "class_names = ['Bacterial Spot',\n 'Early Blight',\n 'Late Blight',\n 'Leaf Mold',\n 'Septoria Leaf Spot',\n 'Spider Mites Two Spotted Spider Mite',\n 'Target Spot',\n 'YellowLeaf Curl Virus',\n 'Mosaic Virus',\n 'Healthy']",
        "detail": "gcp.main",
        "documentation": {}
    },
    {
        "label": "BUCKET_NAME",
        "kind": 5,
        "importPath": "gcp.main",
        "description": "gcp.main",
        "peekOfCode": "BUCKET_NAME = \"bhavya-patel-tomato-disease-classification\" \n# blob: binary large object\n# source_blob_name: The blob on the bucket\n# destination_file_name: download_blob function will be running on a different server in Google Cloud and that server will be downloading model from the bucket(Created on Google Cloud)\n# so when it download's it locally on that server in the cloud, destination_file_name is the destination file path where it should be storing\ndef download_blob(bucket_name, source_blob_name, destination_file_name):\n    \"\"\"Downloads a blob from the bucket.\"\"\"\n    # Download the model from the bucket\n    storage_client = storage.Client()\n    # Get the bucket",
        "detail": "gcp.main",
        "documentation": {}
    }
]